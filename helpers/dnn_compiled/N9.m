function [Y,Xf,Af] = N9(X,~,~)
%N9 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Nov-2021 15:18:57.
% 
% [Y] = N9(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1410.83653014636;-1554.79831303745;-1404.56352339286;-1338.52771898974;-916.945955191248;-1071.21930902412;-923.980528652496;-916.226577103981;-1015.74762414783;-752.95796057707;-952.156507876148;-784.789870867435;-701.108828556648;-931.072756932392;-722.106429195222;-603.342184247433;-672.530700614202;-770.044390714133;-631.728177546946;-634.016812694766];
x1_step1.gain = [0.000567035375345898;0.000599955874084416;0.000731274985980723;0.000673409217940706;0.000861287771203947;0.000812233009774138;0.00105794282013914;0.00100397391927668;0.00106862296134108;0.00124039304206901;0.000868408030865071;0.00123209828350402;0.00142445495036878;0.00117092804550995;0.00149512350987288;0.00140377025253381;0.00168072396627548;0.0013550732803952;0.00161889673926908;0.00171810353948461];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.5352077834833286474;0.86689223645419721809;4.8403607189837059011;-1.4507151248481882089;-173.52071852204659308];
IW1_1 = [4.7462314273132530928 4.5469302311887016543 0.31760522339270474967 -3.6905463639973117296 -4.0946821431208757502 -1.9711221411103749812 3.1766882102544542477 -0.99584120837549994221 1.3442701725093830767 7.8417866960333517667 5.8948891870027946283 -4.862770560328733005 -4.6973654110834690556 -3.2474042668760154662 -2.7179516083781942726 2.1585710713223567048 -3.7058863683130112143 -0.87375995086177737914 -0.5831311647473159665 1.4629447439930387542;-0.68219056253484178232 0.25709803113541102038 -0.50914527181683644219 -0.3595063180329959307 1.9788900462644833933 0.046891765122619090411 0.13258822406725948029 -0.29435271959377118378 0.29565141853784759896 -0.94034253407069123831 -0.65673257615974389712 0.35813052441967457851 -0.24257189201767978548 0.10645964987553245551 0.81081308981987498807 0.14766093446387154597 -0.09166797274662720485 -0.19237361921475773507 0.12923050349207459986 0.46939193352708130647;0.013154195057991511369 -2.2139486834416928218 -1.5066153047361015016 5.9011368702484414683 1.5559587867736823785 4.9503882215270742506 -1.8828116770954730352 -3.073435646499597329 -4.4246762955112490801 -8.8081445689442467994 0.91663056015570198998 4.6663225689607985558 -2.7936986534464423038 2.7329928663327911487 0.87548144412342920884 -10.548475615605177325 1.9366790397066386831 -4.9254596964123162905 -6.0045953349188208037 -0.95310828367045163922;1.149146103693626797 -2.4775048556849323944 0.61600896528890369819 0.84256545361378343273 -5.9291095433571010531 -0.84897046900587869178 -0.26401993614695840051 2.9554992261452612823 -0.53166903638091311812 3.3172870608423661309 -0.10131560218918919669 -0.17427937205060370363 2.0520894230219264287 1.4973462849722256607 -2.3977654914391068885 0.61956517494137075541 0.8438697152153170622 2.153106191343794773 -0.05748263694254092393 -1.2480431351385457006;-102.53120006077141113 -57.011459832394358216 -69.912814907473105563 90.688641051738642318 -35.102282413808559625 46.862418853263790197 148.04871300643449672 -92.368407016481498317 -103.37624761131360174 -63.188731829193613976 -41.368575774637783127 84.393278430167057991 56.096291342126399115 -49.777547289516192563 18.138264181554983878 121.20455305361528531 -28.442011933883858177 116.79076481263153653 -11.113117346380208872 60.666956295419858236];

% Layer 2
b2 = [-0.21476449866110566833;0.066897330939833091201];
LW2_1 = [0.021758502478655402518 0.038816427808808541544 0.01780760037388623776 0.018386576170626004606 -0.089107191798381807368;0.055514743536661852186 0.16490949909926563843 0.057083598089186886326 0.084535584387509923876 0.058588963870012202018];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.16451036213878;0.183414927394939];
y1_step1.xoffset = [-5.38402347594064;-5.86686004892449];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
