function [Y,Xf,Af] = N1(X,~,~)
%N1 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Nov-2021 15:32:09.
% 
% [Y] = N1(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1264.25331958419;-1736.04970875207;-1442.45999270144;-1633.8449430091;-1359.31877085745;-824.433760271242;-1314.42201676621;-906.841468117743;-881.917182619997;-868.707848468609;-806.158068559744;-950.843979304398;-806.414836132884;-665.976052098721;-784.457425652914;-766.266289949527;-786.010269148153;-617.153498700322;-628.44670054542;-576.272882564393];
x1_step1.gain = [0.000596749675880891;0.000628324567031303;0.000687842802517544;0.000663585257273009;0.000765755757282941;0.00104108750890276;0.000869392579217052;0.000824702626264958;0.00114641481988561;0.00111443038869558;0.00116597154978739;0.00103737847137803;0.0011920431821689;0.00149250474639772;0.0013555235371884;0.0014191224100834;0.00139617733423869;0.0013715817580614;0.00167122525007578;0.00177035776747581];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.81846622326549411941;1.6700703176052582588;2.0340964056108856717;-2.2200661513808697123;2.4804836190313830357];
IW1_1 = [0.40800300262287064745 -1.664753585771630906 1.487856144698514349 0.08506506421852863542 0.3572268615787459467 0.12772966612878092207 -0.87558269533519361705 -2.2144431643312265656 -0.034793642525484329286 -0.4959222232829758048 0.64832052361747205538 -0.052312393278572413835 -0.75850123979596018042 -0.30883018700263142886 -0.84392473061142625479 0.006022843691112015653 -0.098077292893208725677 0.28455173633521407828 -0.1025574920207663332 -0.12076301384024952512;0.35419654218040452776 -1.6001730593000076386 -0.98299081440466262727 2.6980821249101163417 -2.2686162055989216313 -1.2779079382895963679 -1.9124440090968353179 -2.6675856998139204634 4.1250466542009229798 -0.49774858423689588571 -0.1946210599105023531 -0.08034774271918507238 3.5396653915988296468 -2.2312803883263239157 -0.22954233252644914987 -0.48648656620475039247 -0.35536862970941751616 1.2018433013243583485 1.3528547343857990626 -3.5520188715572573734;1.3125274938291624505 -1.4018123214933535525 1.5009949862849940594 -0.07532651072575322071 0.22816453594335908694 0.85907919043812253079 -0.94202309164006259312 -1.1104486729274827272 0.21279058579497481252 -0.52383292582244544988 0.45361963345034272965 0.06720021964759516353 -0.5934011045727771716 -0.40525264539610117431 -0.4820772117190251782 0.25699967047143462695 -0.40940706850847563558 0.60247808967036298178 -0.35558575849573120786 -0.082687501338669339157;-1.4756036039955695571 1.4673082662083802852 -1.498014364150833444 0.080425278511939216064 -0.27240694643473900571 -0.92905131622205072706 1.020298941657133529 1.0335333508800506053 -0.22251872498292482594 0.56501267511428521217 -0.45156920933769811866 -0.035900411316716417109 0.59305099544048400784 0.42700416902363957927 0.49974735864666186558 -0.31473910181877734482 0.43177200711256974452 -0.68280810557283666551 0.37959913507008624656 0.10910041795035339829;2.3210311308064204283 -2.2659946561679524812 1.7161459024346159552 2.6894306621188608375 -0.26087900499616384353 1.2263102357138819798 0.0036291196144685056862 -1.1972558152849817059 0.64901358390043961677 -1.8528340957415985191 1.1681165401995818875 -0.65923289383589822599 1.7786718214372254643 -0.83921017183715285181 0.20088001035136676675 -0.027582979732871219097 0.074809031407043813378 1.1221185734796070843 -0.65224885142638511226 -0.63380477959424674772];

% Layer 2
b2 = [0.11949956620832583032;0.204794088471063368];
LW2_1 = [-0.11978257812356031542 -0.15302772404595030298 2.2491866468948065183 2.4055778872512885158 0.37498326045301205722;0.49433678815369685999 -0.038048781479712107112 -6.4540415058394726699 -5.7101492406925880019 0.00082684921684017531618];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0501268984903099;0.0397679584533499];
y1_step1.xoffset = [-21.2808809056095;-22.8855207623508];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
