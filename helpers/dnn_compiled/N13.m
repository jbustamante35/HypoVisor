function [Y,Xf,Af] = N13(X,~,~)
%N13 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Nov-2021 15:18:57.
% 
% [Y] = N13(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1401.16058204915;-1551.96891656671;-1299.76667626747;-1645.13309984194;-916.475855679981;-1394.89671279538;-955.224209057549;-1081.80413436459;-839.700419200939;-853.473111984595;-935.67252006882;-827.731401588421;-736.73747252623;-941.75406418564;-595.267275053259;-585.764462032574;-626.937626923193;-788.196759151685;-604.398946354587;-615.891022506817];
x1_step1.gain = [0.000569819686042758;0.000607953505404683;0.000751308300718247;0.000647771543631166;0.000863434093057204;0.000826877397914017;0.00107304216579258;0.000973601504223382;0.00109414288690452;0.0012680637363532;0.00088122435829376;0.00125069093401069;0.00136621640042277;0.00120530110534994;0.00150445657725722;0.00142381996360845;0.00181168103033217;0.00132698734787876;0.00162397197834258;0.00171487863930981];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.1478790772145766041;0.16923077939480854481;0.81272407950427627554;-3.2476023973273209222;2.5401958810190636839];
IW1_1 = [0.34841491828994897162 -1.1396926644728675448 1.0483835968818657758 -0.18267282488328465129 -1.2707126484986217552 -0.35200628168332193102 -0.013178294784857370187 -0.65526725581835920664 1.5020702878958689386 1.1373724412862449284 0.21390367475082464055 0.7674063294372149846 -0.43264734849042341125 -0.45909263772228459111 0.9720003114009159173 0.85786896867596162952 0.66597704049473294141 1.110129896130091387 0.82472407868984964896 -0.3227462405068417528;0.3558581267953823124 1.308480688000102532 2.4479122794519052597 1.1867862297142932615 -2.3223285200183720889 4.6423593302375731895 0.31679668562964596878 1.9318271840561971331 0.30380838033956253375 0.058889555628316270219 -3.8888724752223704506 -0.80983896476380734519 -0.26361612140449436348 0.75976670172655691449 -1.7390371333078462612 1.2792645221530845046 -3.5326983413718990867 3.533279299024302933 0.10944107770508104682 0.058554590016898805382;0.76322284686069052917 -0.50542858839014193073 -0.57778459124726766483 -1.963544491685303317 0.14596139450993694808 1.9468492796534910827 -1.3516336694344230906 -1.3119751387259686037 -0.3163505506437819248 1.420685120332350504 0.14868288312294170028 0.09898500332438424365 1.6708301717640836603 -1.2210510534220544443 2.5447607352952399395 0.79523059293358411281 2.2362044624064791876 -1.5879029700426039451 -0.3150684433856233424 1.3789465340287136996;-2.2243045504882119623 1.3330076375807802247 0.12258688490398267357 3.5623973412971015051 -1.6030983513710435062 -1.3125114932348429519 1.8995534164639475971 -0.37113130284467449327 -1.7146679260349997342 1.0693591275178455646 -1.4095445788772797968 1.193549942404624975 -2.6556492448971438236 1.532885911674461088 0.23539298666057029141 -1.9311462629115543344 0.33669655967905121052 -1.5769152066081733032 -0.43854257310554822791 -0.75912661837004824505;0.55880415095316249285 -1.2859592863910744853 -0.051775003768334180998 -1.5233457516081716498 0.76564746493022151075 -1.9988177893394329931 -0.091921560162524479365 -0.63176869276248670548 1.5789813286844935902 -0.95529687877362312598 1.5168170067392543476 -0.85703196664283831652 0.78882731559323082671 0.18484136555704380744 -0.57207856918900357179 0.51823640342314336582 0.73546589824854902151 1.004923402510085495 -0.50625666169405936223 0.20380539603959352268];

% Layer 2
b2 = [2.7108120357992468996;1.1223591184473218352];
LW2_1 = [-2.8531724650850924796 0.02810979832615087895 0.03313549843152024249 0.047164149634295653157 0.089093461341572088852;-1.1942710735064756555 0.023570865763890086475 0.023139431591880983696 0.04002427126982715383 0.06174012846349338085];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.182079307695146;0.19912517033094];
y1_step1.xoffset = [-5.09729882720208;-4.87572989456662];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
