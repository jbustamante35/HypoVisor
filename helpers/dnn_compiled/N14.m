function [Y,Xf,Af] = N14(X,~,~)
%N14 neural network simulation function.
%
% Auto-generated by MATLAB, 15-Nov-2021 15:18:57.
% 
% [Y] = N14(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1400.7429230219;-1553.71911965227;-1303.29925481367;-1432.67430434676;-916.973210596377;-1015.78041684179;-911.211094131623;-977.568758899097;-983.198453553053;-867.847684895659;-900.965492569155;-833.917068284032;-744.301568214884;-701.060337780098;-612.919609893015;-577.332878495692;-610.794964362628;-769.611794437681;-565.261394148633;-624.860276101499];
x1_step1.gain = [0.00056892263396809;0.000607779091337821;0.00074576825912258;0.000650595627930549;0.000868230771535395;0.000827038870306623;0.00105485807078424;0.000975598171628157;0.00108936361526256;0.00124821595934433;0.000894442934711964;0.00126759577905915;0.00136161419697517;0.00121072847724593;0.00148545963831933;0.00143514828375212;0.00185079886672954;0.00131430901740747;0.00167631841005514;0.00170474964142556];
x1_step1.ymin = -1;

% Layer 1
b1 = [-14.64246923485226759;-6.635144912058014377;-0.65150890262219207649;3.1176494389019087095;-9.7405708053467012775];
IW1_1 = [-5.148261433218179306 2.5887453414120566997 9.326772278322364329 5.750340501343520927 -2.4329422170751744403 -1.2880224924240308848 -8.1610510458273513024 -5.828679527789640602 -1.0466440298335411008 7.4558632012851191462 -6.5913732448970456801 9.0892744279909898353 1.0426293810105371485 -2.3275662483537429281 6.9505324125095038212 2.6054801169744963296 -2.6666088937808858361 9.5340926519224495905 -1.7989694467995993588 2.7239478397534684362;0.18769066670376896577 -2.7979429593254789843 -2.8465807846962580818 6.2371863625974119927 1.6766419903181857265 -2.9579863744254901725 6.1418669561888652453 1.6869709113004864864 7.5076007680376557474 3.6480071896689256761 -10.90371440935545877 -4.7162201380002368722 -3.9360795653724558463 3.9698474336404312446 -5.9916095343294148989 -8.4492144971548484023 4.4923338892593456251 4.480131779609707543 5.8143392235077033803 -12.181668533151800204;-0.461479856094116625 -1.0889556015860333282 1.2310867324569816361 -0.48274999096778031804 -0.1621185351612719483 5.6206178811443461285 -1.3085395892757070158 1.3194399824216556105 1.3439474175807792911 -3.7321421475200096118 5.8973506837476259435 3.3470341480048171334 3.2284307093470960837 -1.4306235911164817409 -3.4621185393994573509 -1.355442473999682429 -1.4457844112751072618 1.3123148224506677728 -1.3953265908250631622 -0.57902135973584756279;0.84664638285315718669 -2.1660500059073073409 -7.7392244854754892458 6.9257249651528329792 -1.4314146447871187728 7.6163054196396959838 0.17037986061066368038 -0.60759394592864934825 1.026303295710893515 1.806904436937272429 -3.5777697048871934804 -7.4461798581360740812 3.712088639970040127 10.239941058857914058 -2.8479440085613179079 -10.431841510331620881 6.2725014763623114789 0.56078875213279366641 19.137632139933845821 -12.74345863449167382;-3.3776479652028421619 -6.1485401924963074549 6.6569282284186641618 2.5633243440546977787 -1.8969421586317516404 -3.2448508194836489515 -2.9707092940556099059 2.5297616828901117181 -1.1375783721072427745 4.0181370276085273119 6.9262430742091538605 5.819316753367775874 4.211449100644522936 0.44812471816322374529 -2.5264837817890830607 1.961811726186835303 -1.3625268346575378775 2.4671452099497699351 -4.7453314705591180811 6.1413575104182100972];

% Layer 2
b2 = [-0.077336380873112620105;0.028783452066848715101];
LW2_1 = [-0.068260833628421391239 -0.0027701883939870953696 -0.019709048302680512443 0.00075890368528989688574 0.083323990417521920371;0.0061405823636068957924 0.023967771322631583469 0.0080323171458496905872 -0.020582709031609566774 0.033407423021240736927];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.184847215083293;0.19578375328406];
y1_step1.xoffset = [-4.97599620056483;-4.96687848807011];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
