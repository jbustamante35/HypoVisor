function [Y,Xf,Af] = N8(X,~,~)
%N8 neural network simulation function.
%
% Auto-generated by MATLAB, 11-Feb-2022 15:21:39.
% 
% [Y] = N8(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1400.53203617542;-1536.64507196803;-1293.96652528706;-1415.62034903636;-946.390339463164;-1070.57342064271;-868.548016488519;-1016.90990036329;-1048.31509008888;-860.158617414921;-1099.76614698915;-966.168051612191;-681.538346378185;-925.770397862213;-777.422744421993;-860.825599383576;-531.333376290822;-624.704013683944;-633.921924449726;-583.286802206071];
x1_step1.gain = [0.000559411663273668;0.000602640061609491;0.000741264224011042;0.000659591640574934;0.000830991274174089;0.000814658607096775;0.00111761066423522;0.000960253628947954;0.00104966701995831;0.00124595952471809;0.000806063741033847;0.00117837407911324;0.00145256724267481;0.00123293084334293;0.00145938794367877;0.00129917913556088;0.00184897719655083;0.00150369476126461;0.00163318777991119;0.0017952939885455];
x1_step1.ymin = -1;

% Layer 1
b1 = [-7.4783211492419576771;-3.7952792261024437259;0.91466804614887375902;-9.2967788030672480204;-6.7154185994628896594];
IW1_1 = [-2.5008667188106521451 -6.2298137929876933327 0.42700635905836287209 12.633664114100970011 -4.5969312033236642279 -3.9334464445916004216 2.6195586349330626241 1.1254958310292360046 1.7511928100837090838 2.2504619362891271628 -1.2892318883714255495 2.1694299824789031739 -6.8633201140255790662 -10.086029638716428991 9.5323141197336589414 5.3609606668474389934 -1.6922275958716175293 -2.4582108637696031828 -3.17034407798567619 2.99120349871268143;0.48940904738701418442 0.52183669454947945177 1.3565140608949188827 -1.5698102967675606756 0.67417480018120268248 -0.39632829836941330104 0.039789614807506104577 -0.54757171012442329427 0.52075492250506494329 -0.37852189684141229753 -0.25481819863141924598 0.97758130007396737415 -0.044012372885341155548 -0.075096756938420161642 0.47960108555766506333 -0.55111234766744421343 0.75805899598065040745 -0.59805262899664235476 0.30210371178037742634 0.33886103675090195608;9.9255796040126060831 -2.7600884909915257559 5.1502612002626033672 -7.6832263646701344229 1.8126450939992533318 -1.9231552201970640859 -5.8863374438179647541 0.6297269637640505735 3.2105129791843767251 -2.1742335318751204731 5.9385028028965001212 2.0399360094173295543 9.7084555380794945734 11.370403605004892 -10.592928767743742924 8.3290376720277077283 12.942792095159276755 -2.2020180798306392411 11.187021161952324988 -4.2967149487864206847;-1.8724986211295500116 -9.2316442201966317782 -7.9311418737198078333 18.085053968722998974 -2.8143620597947691664 -1.0080461168402297112 1.8335131505985238221 3.6247534279182151984 5.1988855169394225797 -1.7523225614708026754 -1.8066852894601652668 10.264146715588310599 -4.6139483852420628551 2.6731992662174675068 2.9869969687200699227 12.15662881608345991 6.2731882678141719367 -5.8316314902216532801 3.3806716911076222232 5.0622133249505454344;-0.17803098529336058853 1.3048955178974608327 1.0866454667502860598 9.2414541515464758703 -0.30632903137017225559 -0.2849861444597000526 -0.29549868486806407653 -2.3311298723227791285 -4.8057587656583020674 4.5996311835940897339 -7.3131576867799683583 -4.6592387384477493839 -3.8918923402200045203 -2.3867360746706909325 -1.8172107259393908141 -7.7931153341072425533 -2.2071103541228440648 2.4919208524710474428 3.6814929727083405275 1.5500919260389449672];

% Layer 2
b2 = [-2.0665873215580101707;1.0462537515100278629];
LW2_1 = [0.030493974576602734389 -2.2607925044223895483 0.021965113767794308686 -0.028937514836902385185 -0.021886723771131943311;0.011594798413886837907 0.87879247098786161807 0.013498772741658790833 0.0021428185494437521075 0.097777241094811478961];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.158053639719415;0.160760905716978];
y1_step1.xoffset = [-7.60829655285991;-6.64709485369556];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
