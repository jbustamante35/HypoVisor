function [Y,Xf,Af] = N9(X,~,~)
%N9 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Mar-2022 15:08:00.
% 
% [Y] = N9(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1399.61188765171;-1534.05505438384;-1293.34910630322;-1423.64588864033;-1448.22163080245;-1095.83032745636;-883.608132806027;-998.5912536979;-867.649933817576;-742.537014305191;-1052.43127427643;-970.261617093168;-690.284282806338;-677.800534732266;-760.20744863756;-884.271321305792;-485.014460963754;-670.499773001304;-641.166444853363;-533.319190708943];
x1_step1.gain = [0.000559780953780886;0.000605890746371519;0.000744564374980547;0.000656838439657376;0.000833291807992675;0.000808111318480011;0.00111946399561559;0.00097404948626468;0.00104744041633652;0.00123919864152127;0.000822487568790264;0.00117093400745275;0.00146070996115487;0.001239437020309;0.00147691879702632;0.00132591780812614;0.00181601917317112;0.00143848349945054;0.00164577865215656;0.00179921570714213];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.2225355788192304729;-3.0390727990749022425;1.9526540663653670915;6.261157826536082105;-23.597027911736542904];
IW1_1 = [-1.1876115007290741765 -4.6428549356545811833 0.63357017644256130584 -3.4614014883708201786 1.2587191191868427609 -2.6064365862938254637 1.4657789524847726348 -1.367288961266646341 0.10663664251179134912 -0.89964106091606343973 1.5336042574144648221 1.7183109046115876417 -2.345919063416939121 -1.3126544160443125442 3.0363258413124571966 1.5996924519553381572 -0.32238558639532749472 -3.565848981674793361 2.789260740736314137 -1.1388820099671908004;-1.8127738842628886573 1.9002617109771471338 -0.14107646748493055111 -0.36019270366240807579 -1.3203488281470321386 -2.3851779389418701349 3.6771941821185460952 -0.41815553201670263572 4.2819136206532162348 0.76196577483797411912 -4.4257775637375837974 0.079028519091395743601 0.33146005651403215309 -4.8539534077341137674 -0.25016724190296757424 0.56222956556071312928 -0.87109002581157080058 -0.22393113272253878376 0.37399819320603522321 0.72714063410752527439;3.7210660979378742397 -6.2598121314669041837 2.533752514150185764 -0.11157765014990905783 4.8524630053239796723 0.062066443687075777136 -8.5570433695104810567 3.9223314077084494578 -19.601622405820350536 -2.8593999143263433282 7.1576466759513746041 -1.1149561155283407299 -2.1052756902413225504 9.9102228532934582006 -0.22833197107602640208 -4.0289422345828453942 1.1427493555490322308 3.8096730376012910568 -8.0280032098436215904 -1.9537221688319041935;3.3484247095930279592 -0.46441226277466585159 0.95427336469738976987 0.73556783971553585388 3.7277567221070304626 6.7112453919287311521 -4.7765407734656779581 -2.8706756369057218059 -4.3617684984089750699 -0.29550440045218362428 8.3243244305126111726 -1.8412217057413238219 -1.0848144302158468921 5.8007345491330024601 0.52212414795070283269 -3.3969266048960031767 0.40196888097126898254 -1.6455354408829587776 1.008392052532944172 -0.17507052382628265907;-5.0121961436550224178 1.6589623290406134704 21.141119898273004196 13.370629347138301313 10.187559639570119785 20.149122070827441888 4.1659782855329243745 -15.274343299125227702 1.6241739834295012557 -0.67430312193397601295 -7.4009360647670563438 5.990035318173038803 13.061588594575836098 -14.914960925732620112 4.3524190207566180177 -2.5387638435355617261 -2.4484871573546200807 4.2587537039796048433 -7.5714644319713819698 -12.663084935843739842];

% Layer 2
b2 = [-0.12841253579483213887;-0.42747425065399885513];
LW2_1 = [0.28604708447489102241 0.092304650048232544934 0.028925845884951541243 0.067608170445237716906 -0.032037092245001549951;0.56470677390387780115 0.0056763479499000448966 0.0087248133949645364366 -0.0029368966563089174068 0.06794227289965752703];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.159973793840521;0.160843565005093];
y1_step1.xoffset = [-7.42107990485469;-6.6039790604907];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
