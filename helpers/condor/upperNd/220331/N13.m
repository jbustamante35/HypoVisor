function [Y,Xf,Af] = N13(X,~,~)
%N13 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Mar-2022 15:08:01.
% 
% [Y] = N13(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1397.21308468679;-1543.43444183309;-1408.602024433;-1623.36553742573;-1383.46312224168;-1389.79471664654;-922.318663084745;-1048.046902029;-861.304783263157;-753.936365564;-1348.00328263932;-731.137662677299;-657.307787765588;-927.137114523547;-592.969644717677;-562.886792950321;-579.053372953051;-745.456278813713;-624.199869330244;-551.198536020635];
x1_step1.gain = [0.000561777951949303;0.000597443289697232;0.000735588716844075;0.000651145092714532;0.000855016138151231;0.000815349214201131;0.0010970071019364;0.000985649389014236;0.00105414312512833;0.00123399357946091;0.00085959272508539;0.00121398209946192;0.00147576344503261;0.00122239682044985;0.00153994184238701;0.00147626568902529;0.00184045466965898;0.00143557553545841;0.0016570763174636;0.00182504694816868];
x1_step1.ymin = -1;

% Layer 1
b1 = [7.3783578515687358035;-1.0173077369895400235;2.795678997793159315;3.1601575794294793909;7.1653662175175139026];
IW1_1 = [-6.1584902643576269199 0.55743805455250816649 5.6110543011796805146 14.490183530484701535 1.9871509074958666474 5.3538333714145984743 -3.2451104389157525709 0.55348302851982367212 -1.7840266918784195571 -4.192414799921939661 -5.5004299613025491311 -3.030935023378840576 4.5701662775118307991 -5.8920762375742716799 -1.4701940975041727366 5.622386623598002231 9.5340593830709945422 -0.95302303443047875486 3.6812797040475255805 -8.4245077505665548756;0.57994341225670853479 3.3481460255811148485 -1.7827414921471282927 -4.5263016486497296142 1.275707854308480993 -2.0851151893210535526 0.56403717516825602196 1.195032725132814333 1.2295392552228090466 2.105909247407552698 -1.374800799030180265 1.6149189645784589597 0.04217575781277016489 2.747435527427757318 0.06326498659655828416 3.4551466890484188177 -2.4330913925783281826 1.013507339171183963 -3.8520246565515372517 0.028772496359818891531;3.6495638171624631418 -11.349518648771079299 -4.506591890241719689 2.0398763949443479149 2.0349475891481128009 0.76232013828262235045 -1.7150353709591157347 0.3176809286564449275 -5.1863619019372242391 -3.964610920398101257 -12.726592212694232131 5.5266930703421168758 -0.64109755077426855419 -3.1515139265951499503 -1.972752650552060727 6.5846462409181532038 7.6667174580946069185 -3.2015442470581705336 -2.3645837876935256183 -4.8766758546332731328;3.5254405154206205353 -18.340805497306202909 -3.725634836763548563 0.70234316495090076682 -1.3094689195809916527 -0.32162172880751460635 7.9891116460250142239 -6.5341595548288431416 -10.764287449832966814 -6.6312514453180115837 -8.2198164851510604478 4.7597416232778524403 1.2091300655033390132 -2.2282795945181463892 -5.0988391090460991606 -0.5907860014158125006 7.985687391525103429 -3.583701517524691571 0.45989892929610143302 0.023722407064137956273;-1.2212020620756443012 1.9935136194060187886 4.8168905270562980547 5.9047154661473211235 -4.1976108704437118391 -2.3899106820257309813 -5.7494164950179316165 0.23477047864775196784 -0.27028852084709309445 -5.6707121212384681286 5.5047367315081938699 -1.1297036979642691712 0.27525409948599549592 1.2525903541777578809 0.44698112682646867766 -2.3667451833540726902 -1.3381488162190180446 0.93130203985218396046 7.5117480294829066523 0.16005420878400916651];

% Layer 2
b2 = [0.36755218566538006009;0.045259819287270290633];
LW2_1 = [-0.050908097659518015965 -0.03569036533762334068 0.025794221354614420283 -0.03131520649226234021 -0.12399523183786070879;0.026229544766103292386 0.02738772033981688378 -0.027051163773181542693 0.036340829076209876791 0.03323615508430196458];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.172787023362635;0.177156114280607];
y1_step1.xoffset = [-7.04865604161122;-6.15000369960981];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
