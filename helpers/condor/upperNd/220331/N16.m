function [Y,Xf,Af] = N16(X,~,~)
%N16 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Mar-2022 15:08:01.
% 
% [Y] = N16(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1409.99062885066;-1546.01041555339;-1405.42150384305;-1618.43319176546;-1331.64657252048;-1369.24573915369;-912.707341186342;-1040.92426723582;-858.10909625818;-877.739125358829;-952.39750815265;-898.213209489335;-738.027639612053;-706.310804187712;-691.226770822001;-552.584956095195;-576.826797359967;-781.169998155845;-629.265927254543;-562.089590162544];
x1_step1.gain = [0.000560823569608229;0.000599006478801058;0.000736161560161999;0.00065218186122663;0.000874467361600232;0.000831446173407612;0.00111469955360269;0.000973058804865535;0.0010672433489245;0.00122805411288058;0.000867092848151397;0.00122450374345891;0.00138582321754878;0.00122568500574479;0.00155748686212671;0.00149617284322729;0.00189723477150091;0.00136012175941217;0.00165758889739597;0.00180290193772832];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.0203742628866070419;-0.40501229417477419004;0.32664511474906321453;1.0708622587590728159;-1.0413041382045995498];
IW1_1 = [0.29109867466244032652 1.217470897233134286 -0.62979265115469007519 -0.15799474532482621347 2.2713248306696303125 1.0162647230022989753 0.50956006962511701808 0.63457471997675474196 0.3896749693601152531 0.89101992301135624075 0.18610176503037664797 -0.58801424237285659924 -0.46382370960283569872 -0.39064229469581912557 0.070141306569782568836 0.17736702928008185598 -0.61948016847825126963 0.33407761337201358209 -0.68839562606463200467 -0.76140399219235654904;0.28470085135910966345 -0.18368261976419680837 -0.29531095855177436071 0.22599378222065114041 -1.0495072350177112597 1.1241065282347340037 -0.086182701592422250592 -0.559889626608608304 -0.34446597222476138533 0.277191871568806536 -1.0207522072106594013 0.55535228940494996142 -0.17414707515090716017 0.58543477767399121348 0.10126793991967543429 -0.8526410437223529426 -0.41491353081641813016 0.15955679949088499847 -0.52598463475373957721 0.20072179094260791943;-0.3258358319648510526 -0.12013448234628534839 0.37570565735919420058 -0.24096809343153707816 0.55457189907795212402 -1.1767475621531520158 0.090309823485054438463 0.36783401773452584216 0.18776074153504473951 -0.32819195854186977712 0.92183217761173763538 -0.27891832964130647277 0.31601596219655531117 -0.45203125628280382831 -0.078693438653341052369 0.69976990526978866125 0.41480998567668575516 -0.47569709986884178843 0.64685823956918442335 -0.11602107258212060459;0.041268167186592319418 1.68369998906852536 0.043419514207401754824 2.1861298294470214998 0.22720279952663707812 0.035993780550560669496 0.46473728198621755414 1.1414220015484133341 -0.11413646677961254705 0.72917862861202620284 -2.4814489958707781625 -0.82308405205659473935 0.70321621821171942379 1.9637039489188063968 0.19065733626361636155 -0.86907672083797460338 0.57229744739331134262 -1.6931433213649189629 -0.53988568124728242292 -1.2422013665675830651;-0.03591470025523627041 -1.069264351263256918 0.036383312851079985251 -0.20719569775302582038 -1.374377299595500812 -0.033414449833739451323 0.11375336526165291673 -0.69092898074411757126 -0.53295907174575163356 -0.2607153399885907552 0.23772602287615671179 0.92250641387294962659 0.44793733502534871516 -0.22767030930654383325 -0.022154733516446978303 -0.43459572825379083616 -0.23714676947216939418 -0.54304889916434184727 0.18297681030125814705 0.32155038341800412649];

% Layer 2
b2 = [0.17686380555651082247;0.052078080451126523842];
LW2_1 = [-0.09629805664403671972 -0.36668779654242544819 -0.34686052075121415195 0.043208667321305169184 0.17788509775442709615;-0.097401570330225478722 -0.29638772418261455366 -0.29903900377706549296 0.015060524014839798274 0.11201992326437450187];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.180768007561403;0.187512888188343];
y1_step1.xoffset = [-6.57868387725717;-5.77357439945885];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
