function [Y,Xf,Af] = N14(X,~,~)
%N14 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Mar-2022 15:08:01.
% 
% [Y] = N14(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1398.25951013721;-1544.31379559673;-1407.23043234975;-1622.93262867691;-1358.98141550704;-1379.92995002326;-917.911128870411;-1063.72414820576;-862.251330306685;-750.310656141823;-1355.25102414224;-741.163379505918;-659.989714963455;-928.106292381006;-689.32423766776;-565.776252564729;-581.170860202659;-751.217327669314;-614.305120699458;-563.024612391502];
x1_step1.gain = [0.0005619403964715;0.000597795835011956;0.000737644190425623;0.000652689592691795;0.000864259687225673;0.000824243158639593;0.00110060880545339;0.000971969402812993;0.00105618488432757;0.001237638523445;0.000872639490497697;0.00120133300517911;0.00147053690108434;0.00122269993227525;0.00155985318154974;0.00148084222320365;0.00186604445801451;0.0014116751042668;0.00168023959815902;0.00180046417442923];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.2628256676422484617;3.1496219089126467061;-3.3336209933182261445;3.0470747138496259154;0.53617630952520967114];
IW1_1 = [2.2354254604629342218 -0.72559245871068545064 1.5998241835437068126 0.76960505908496767979 -3.0088855477281870598 -0.39124299515322363829 -1.9634239508279744957 1.2245322684734309959 -0.78150874142874637851 -0.27515863042478860834 2.3563655686322539928 -1.0668043676758274252 1.0542658754006604127 -0.015641788601833850336 -0.27195207103213470123 -0.59287028790178053494 -0.075779344148518057445 -3.9828051497301339978 0.21062847775740853318 1.9185794740695736316;1.588486734267819056 -2.3809172748737821301 -3.491735360031427593 4.9884732216230736057 -3.0218260591090766454 -1.7652689834709383021 -3.01611601124982176 0.86336800046508643813 0.51900616864607007628 0.15133044526252531492 2.419927281613075909 2.238259122212467922 -3.7072569427678572218 -1.6593036321071090722 1.6547749169255254742 -5.2683117056436907788 2.6332596556994971593 4.5986771507108246126 3.4675277986206403114 -0.59442071928912121326;-2.863962759035040051 3.0108892144800267765 -1.6159323885584850888 0.17291091497804972343 1.8060173041108522618 2.3107746159715647494 0.67044040406962934764 0.19087734839513870178 -0.53930941780462449131 1.3456226680880205571 2.2944378279419219702 -1.0306378076956481671 -0.87315207322503163301 -0.47014090859549206858 -2.1412317935503053512 2.8389981834590960474 -0.17906527759957147072 -5.1279628135411341461 -3.5332540967222141326 0.71329358456881775119;-3.4323380543575447987 -1.0597929142857520635 -4.3870268879935014894 0.53827284110626494318 1.7271147023560970979 -0.72750004190556782913 1.7550793607090771076 -2.4465670543461262021 1.5238951542745668988 0.6602798726588684497 0.22494766549611050488 0.68563216110611380216 -0.79676494268760977846 -0.066460262060476005264 -1.4383224625187909229 0.25361908715725922647 1.9695071328761730722 2.0571780504574781467 0.77363876731929015484 -1.0456032347083656919;-1.9758716220239689321 -6.4296393981722541611 -1.2395913588208473666 -0.36419500562104178965 -4.9241999298335041857 0.47585201473485361223 6.8956602281830452483 -4.9823982127761290428 -6.3662500963262207421 -2.2246213364284126435 1.581333741870493359 2.6511526709740333985 -0.13592411818755073538 2.3672634206044440575 3.401642802397948806 -2.2977864034670250071 0.75802509631123149436 1.3014739377900899076 -1.202142218415706898 0.70035409469492371226];

% Layer 2
b2 = [0.13569685772067152651;0.053007319920101353405];
LW2_1 = [-0.078588254920940459058 0.046051750907062080631 0.032020078030124243806 -0.042145245004687602319 0.010118796552066747566;-0.082740350499520415317 0.0078473258365075113097 0.010677308708915062008 -0.056223566828180707167 0.025541688247520771132];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.174489912167446;0.180343367047149];
y1_step1.xoffset = [-6.85462522948045;-6.07093821225524];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
