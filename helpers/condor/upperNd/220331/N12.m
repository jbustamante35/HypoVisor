function [Y,Xf,Af] = N12(X,~,~)
%N12 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Mar-2022 15:08:00.
% 
% [Y] = N12(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1398.31768977888;-1537.16140857512;-1303.40177677058;-1411.75403542598;-952.165047141659;-1043.03756390397;-869.705987917919;-1013.51866262702;-1064.80772954793;-759.503488560436;-1362.50539377923;-737.829733553243;-672.891200216279;-920.729927967951;-597.503755694707;-568.639207587469;-580.271112903469;-730.165757080957;-605.79077850983;-578.072881090461];
x1_step1.gain = [0.000561902455254255;0.000601187056685885;0.000736033462706493;0.000661228210396841;0.000850288127073243;0.000827240522764263;0.00112267100659497;0.000974367001674459;0.00102654550366447;0.00122507225753397;0.000849074569703615;0.0011872501538616;0.00147780422944659;0.00122285800801168;0.00151957666861415;0.00146842534863586;0.0018502329775371;0.00144989950337911;0.00165463768669835;0.00177996892335286];
x1_step1.ymin = -1;

% Layer 1
b1 = [-9.1873972052985255488;-2.5834750321069539503;-0.049940580019911959275;5.7383517706710405193;-3.0434294781417436937];
IW1_1 = [8.8219947793786381851 2.1992519392305669435 2.289818518214264742 2.5309172698773592103 5.2078487169129328294 3.3742870386884766809 -1.5324469874813797521 1.9498375618670931164 3.1287789513979431533 -2.3172094028070797656 4.0473356024375428674 1.303176595863863696 -1.3159714718754944585 0.4610475585361776818 2.6448372956883341445 0.0974085894520303891 -0.64556583035201686727 0.54177603386455674972 -1.553857771279836264 1.1112326772972778155;-0.33833289014005735185 -3.68038142074440211 2.3543625400128935787 2.5350944878764245516 -1.7370045484864358176 5.6162488556907579351 0.28047514424235486796 -2.5860401495243117154 -2.8893109215986170213 -1.7331072505813052143 3.5044118131720138898 -0.35293407849103819451 -0.22089389035218090496 -0.52455707820332320157 -1.2357755271704966571 2.083712567226161827 1.1703310545176659474 -0.83510692174557488165 1.7663582767882581859 1.5762449401349269973;2.6648294612487091193 -3.5576218923167162167 2.930488473739918831 -0.4179363154082876286 -0.50276184094548470593 -0.60336934476250203563 4.3753127869701735619 3.3537346204985460929 -0.76203528926585395453 -0.8485867855573844265 5.8232383467348070027 -1.5290534728346432125 -3.7665518556953743179 -1.2644363504433444589 -3.0804236162930651588 0.6649732531563963267 2.1139198014895699274 -3.8312049562720207341 -2.3304471759081963889 -3.767837200935792108;1.0272586509450654102 3.0238940428579552666 0.84078391510328687186 5.2056107646913121201 0.94164028173093750063 8.807277337323291988 -4.6791421114322400143 -3.3994559220829518864 -0.48025195166774992117 3.1144151346533353042 -6.4611488938709351615 -1.7076614047598654977 -2.5115471238326878556 -0.3110347527338021556 -3.4416413909597651788 -1.2435194624159289223 5.0975829772069394252 1.7542499436581160399 -1.5119641197787818676 -2.377171303661887336;-2.7548921325409962968 -2.6369852173383190319 -0.87850070770163246614 -1.2735376106520186479 -0.93632355397606525926 2.5412917653794759865 0.44076136284746997296 -3.7371749942999024086 -1.1703449803680929797 -1.6816857933911624201 1.9787649241081830542 0.77816691851168318106 1.1443328156443630661 -1.1527580478564085631 1.8102306510664811778 2.6655407188792197282 -2.2428130358444300363 0.2727214957411610019 2.5819554028348625785 3.4601641890531227297];

% Layer 2
b2 = [0.16622880409911469646;-0.83466264412495816405];
LW2_1 = [0.00093940834530599590275 -0.049492361978387744426 0.028999773416276068694 0.032211303683506879725 0.047956643047206003183;-0.92901471639860577767 -0.0018362784339194444284 0.0085297756311409206331 0.0072784104614157111093 0.015185185427135004799];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.171697731183255;0.178383653649321];
y1_step1.xoffset = [-6.93885932646615;-6.09863703646657];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
