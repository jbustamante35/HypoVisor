function [Y,Xf,Af] = N10(X,~,~)
%N10 neural network simulation function.
%
% Auto-generated by MATLAB, 11-Feb-2022 15:21:40.
% 
% [Y] = N10(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1402.60021390444;-1538.43587840893;-1395.51563803381;-1623.77029760226;-1431.49979827927;-1372.53039921434;-908.947920996702;-1048.36258827141;-865.069494925983;-863.573385943;-1016.7951761874;-969.531283805618;-653.567242291816;-700.014147355363;-584.933137451979;-589.014833928235;-584.67401131115;-736.288054869997;-567.410232450825;-575.779875405449];
x1_step1.gain = [0.000559486223505003;0.000601013173332495;0.000743260141678046;0.000656882218218989;0.000840865416145254;0.000826776716707133;0.0011178521369991;0.000982286223425355;0.00105224979478511;0.00123921054648143;0.000835779547028258;0.00117742715948156;0.00150862098250736;0.00123223515745343;0.00148740750886256;0.00142358735563803;0.00187779889466587;0.00144584899764434;0.00166396330126858;0.00179468863358781];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.2716354183196951766;0.59466669394594240394;-1.0113912139330616391;8.5177385123478863704;-1.1338178819771360661];
IW1_1 = [-0.20158919316824935875 -0.9548567609330568251 -3.0022400412781093948 -3.8055821590780256614 -1.6961098840140613753 0.15196960361398229034 1.2338620182364494759 -2.6805620536987597724 0.06819889840199920561 1.070629696456139035 -0.040891709882872981363 -0.4822144237480118778 0.062356420501603712636 1.3412830669606943257 -0.16322982308843725363 0.23673873045522031422 0.60283686551725512714 -0.25434060258927493337 1.5681727888272194438 -0.8830441348521470557;-1.0910950153144551855 -0.81728023372550961945 2.2819904032933240323 1.5610735395544346193 -0.31116136916403935864 0.18564668222670427378 -1.5632161785908575968 -1.4488726769932520622 -0.60395651800805338905 -0.86248277455059452201 0.13592515317494971439 -1.1249092933508753056 -1.4337329434329089128 1.1374674472455490459 1.840202651773109821 0.1503118553772117838 -1.1403876635082270674 -2.6028780299356180095 1.3921393086632698477 -0.029803625848847992152;-0.66650490139019313851 -0.45202409404864291043 -0.79382896352533327544 -2.7303466365800006521 0.53361467831096986991 0.74246669518318142433 0.17015376375356899841 -2.4858976870900821865 -1.2632322386169467787 1.1192625949629775306 0.43990825164409769199 0.35723035393416402439 0.29688036952258822776 0.106207924614369148 -0.62389562972650014494 -1.3443436271069535426 -0.076780141062790546735 -0.19986493442873687343 -0.23310755894666426724 0.47998243342497098896;6.3120399279318135655 -8.8085651657256764935 -3.9496378766597834975 5.2137100174075969861 -6.7992056649386904965 0.32801227922075160137 3.4086741793451023064 -0.73093607871344579152 -5.0310787466148596536 4.9251940159815079667 2.6223279455818788719 -8.847650618771137232 -0.073265730141957724486 0.35190194782012784724 -2.1585777368822025579 -0.76917007771765444346 -0.36789987030542525837 -3.3132508170687127169 1.7131416769113212428 0.40490576852987497647;0.34024134119609916738 -0.024500723257047822556 -0.83914567419039454155 -1.1492684208799972545 -0.064875945815103863712 0.44864103999134186118 0.5744949244029933233 -0.32037547018382828146 -0.60832036229651276216 0.94660137151997347793 0.23783824381044293972 -0.017714092483161063968 0.55895227374474465432 -0.11278882438103676744 -0.84260757644438477598 -0.5080296407148601201 -0.097743476006362073338 -0.045722608644950833712 -0.32672554244390228373 0.16727952651002325757];

% Layer 2
b2 = [0.25195428364388133824;0.015370192558309514475];
LW2_1 = [-0.0398070064423649006 0.0004366258172019983467 0.0029794534815157048754 0.0062847282191147643693 0.0096981845043425923131;-0.089906315372671297137 -0.04977043692694409216 0.077348161412185478802 0.053112439644369589808 -0.17067411081898078984];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.169057874804686;0.162993712704699];
y1_step1.xoffset = [-7.18408599833865;-6.48333240456284];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
