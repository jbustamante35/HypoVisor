function [Y,Xf,Af] = N3(X,~,~)
%N3 neural network simulation function.
%
% Auto-generated by MATLAB, 11-Feb-2022 15:21:38.
% 
% [Y] = N3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1398.58580939321;-1530.8407130875;-1306.46367851043;-1439.56427375833;-994.16912622187;-1368.48198909422;-827.549019417081;-967.155580161116;-1057.13245098543;-952.591143290661;-1116.60045367709;-1105.01088003641;-652.534329091087;-1011.11461894144;-814.72975664462;-750.453782136112;-588.84939644753;-625.471261906375;-851.601588693843;-608.087491368063];
x1_step1.gain = [0.000558301990666695;0.000605285101781311;0.000753054887769403;0.00065080897283761;0.000792215139782301;0.00071616573179172;0.00106040783998442;0.000987291354154319;0.00107326816814159;0.000979339644086237;0.00081347813835834;0.00113335747773217;0.00146636503543095;0.00118779885975377;0.00137468337184494;0.00143384245116712;0.00174204660329816;0.00136935321577669;0.00125481901321891;0.00162226773564236];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.7412362098496230178;-1.9873238191897888427;2.5723516525113367948;-1.8156164900858933198;1.7239653128208516364];
IW1_1 = [0.38251879000915645079 -1.0199002076303693709 -0.85163466435249168818 1.105937290067508405 -1.5637303251830994011 -0.33219794167052207889 -0.011189765653260550643 1.1300830790820761695 -1.1096973962670024783 2.1342462692256960466 -0.23263627675225787006 -0.027456779499666801592 -2.0472672209680577993 0.58740616201060313895 -0.20091381708353833746 -0.30339994179357243631 -0.62119047897775836464 0.81668379025770432289 -1.0160379636015595128 -0.73921785269725348577;0.66812462637512481933 0.1903110231445667988 -1.1935591390834461301 -0.34356868339687124392 -0.64911357374314926361 -0.35915828318261661112 0.18423622964993208173 -0.49884287454690540153 -0.16888964461932973182 0.97744692901511320837 0.29529941315341839969 -0.23566828155156152591 -0.4310624852306936261 0.84560980760913717624 0.72706062605589549808 -0.27408549573996909832 -0.18248116790051935321 0.073971256911910671095 0.87188679337678798298 0.67328691761357994938;1.282535737876576265 2.0415978098845650734 -1.1548182545363869789 0.83141578058330545264 -0.97183820204619852934 -0.9632078281651583751 1.6095221263490318009 -0.64651769984378848477 -1.6698853813912777344 2.4358560296464255579 -1.9748136332676338167 -2.7646277566456620711 -0.40263217004154161494 0.17009582976481263383 -0.69887330289021709628 -1.7438517925737975212 -0.60585146448996618496 -2.4436430298958522478 -1.3662609629986246507 0.5509771526466850089;-0.54290718114239433501 1.1204937672972634655 0.19262527621148373136 1.0259386532678549386 -1.6394233901896224648 -0.57117490857696517903 1.3526145455363369763 1.3170301860051896181 -0.85646208028880177476 1.3854692359386286959 -0.34130951671764586663 0.31825550525000334545 -1.222538642062408254 -0.12003182948783319706 -0.18142588931073394543 0.051874043640101626107 0.29299611435714906227 1.2130584628923388735 -1.5856982046612246862 -1.2213783659052284136;0.43676562999753565375 -0.42039400502971280282 -0.32401318572287263198 -1.0616004549427295878 1.4063654826530698205 0.56451453549803176646 -0.98467225565481120153 -1.369217217368292383 0.6540586392157571316 -1.0318701624254214 0.39436940354321153857 -0.12967678743770982841 1.2376972196947160221 -0.11345213062388424807 0.22559309482248376955 -0.2123471270270629041 -0.23650690562161413855 -1.1446314657040210783 1.5526281080249539901 1.1778830574873280224];

% Layer 2
b2 = [0.42802127829846825513;0.28503217072943537458];
LW2_1 = [0.065254319927696133319 0.036163291347097670236 -0.060194369987336307504 0.54587358747857950281 0.53977635150588898494;-0.21724288387529017141 0.39558162669760432717 -0.0030565484401332502357 -1.1762928738179885269 -1.3587511869330652914];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.12702947249127;0.0908204415776994];
y1_step1.xoffset = [-10.2901481381826;-10.3860677267173];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
